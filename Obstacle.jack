class Obstacle{ 
    field int x; //position x
    field int y; //position y
    field int carril;
    field int stepAnimation;
    field boolean draw;
    field int seed;
    field boolean newCone;
    constructor Obstacle new(int carrilRandom){
        let stepAnimation=1;
        let draw= true;
        let newCone = true;
        let carril = carrilRandom;
        let x = 29;
        if(carril = 0){  //
            let y = 5;
        }
        if(carril=1){
            let y = 104;
        }
        if(carril=2){
            let y = 208;
        }
        // let x = 12;
        // let y = 104;
        return this;
    }
    method int x() {
        return x;
    }
    method int y() {
        return y;
    }
    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }

    method boolean hitbox(int playerX, int playerY) {
        var int playerXleft;
        var int playerXright;
        var int playerYtop;
        var int playerYbottom;
        let playerXleft = playerX + 2;
        let playerXright = playerX + 2;
        let playerYtop = playerY ;
        let playerYbottom = playerY + 30; ////////////////////

        if ((playerXleft < (x-1)) | (playerXleft = (x-1))) {
          if (((x-1) < playerXright) | ((x-1) = playerXright)){
            if ( playerYtop < y ) {
              if ((y < playerYbottom) | (y = playerYbottom)){
                do Output.moveCursor(18, 10);
                do Output.printString("1");
                return 2;
              }
            }
            if ( (playerYtop < (y+45)) | (playerYtop = (y+45)) ) {  
              if (((y+45) < playerYbottom) | ((y+45) = playerYbottom)){
                do Output.moveCursor(18, 10);
                do Output.printString("2");
                return 2;
              }
            }
          }
        }


        if ( (playerXleft < (x+2)) | (playerXleft = (x+2))) {  
          if (((x+2) < playerXright) | ((x+2) = playerXright)){
            if ( (playerYtop < y) | (playerYtop = y)) {
              if ((y < playerYbottom) | (y = playerYbottom)){
                do Output.moveCursor(18, 10);
                do Output.printString("3");
                return 2;
              }
            }
            if ( (playerYtop < (y+45)) | (playerYtop = (y+45)) ) {  
              if (((y+45) < playerYbottom) | ((y+45) < playerYbottom)){
                do Output.moveCursor(18, 10);
                do Output.printString("4"); 
                return 2;
              }
            }
          }
        }

        // hitbox para eje x
        // if ( playerXleft < (x-1) ) {
        //   if ((x-1) < playerXright){            
        //     do Output.moveCursor(18, 10);
        //     do Output.printString("1");
        //     return 2;
        //   }
        // }
        // if ( playerXleft < (x+2) ) {  
        //   if ((x+2) < playerXright){
        //     do Output.moveCursor(18, 10);
        //     do Output.printString("2");
        //     return 2;            
        //   }
        // }

        // hitbox para eje y
        // if ( playerYtop < y ) {
        //   if (y < playerYbottom){
        //     do Output.moveCursor(18, 10);
        //     do Output.printString("1");
        //     return 2;
        //   }            
        // }
        // if ( playerYtop < (y+45) ) {  
        //   if ((y+45) < playerYbottom){
        //     do Output.moveCursor(18, 10);
        //     do Output.printString("2");
        //     return 2;
        //   } 
        // }

        return 1; // el jugador no est치 dentro del 치rea del obst치culo
  }
    
    method void draw() {
        var int memAddress;
        let memAddress = 16384+(x+(y*32));
        // column 0
        do Memory.poke(memAddress +32, -4096);
        do Memory.poke(memAddress +64, -256);
        do Memory.poke(memAddress +96, -32);
        do Memory.poke(memAddress +128, -4);
        do Memory.poke(memAddress +160, -2);
        do Memory.poke(memAddress +192, -2);
        do Memory.poke(memAddress +224, -1);
        do Memory.poke(memAddress +256, -1);
        do Memory.poke(memAddress +288, -2);
        do Memory.poke(memAddress +320, -2);
        do Memory.poke(memAddress +352, -8);
        do Memory.poke(memAddress +384, -16);
        do Memory.poke(memAddress +416, -256);
        // column 1
        do Memory.poke(memAddress +1, 127);
        do Memory.poke(memAddress +33, 255);
        do Memory.poke(memAddress +65, 511);
        do Memory.poke(memAddress +97, 511);
        do Memory.poke(memAddress +129, 511);
        do Memory.poke(memAddress +161, 511);
        do Memory.poke(memAddress +193, 511);
        do Memory.poke(memAddress +225, 255);
        do Memory.poke(memAddress +257, 255);
        do Memory.poke(memAddress +289, 127);
        do Memory.poke(memAddress +321, 63);
        do Memory.poke(memAddress +353, 31);
        do Memory.poke(memAddress +385, 7);
        return;
    }
    
    method void setSeed(int seedChanged){
      let seed = seedChanged;
      return;
    }

    method int getSeed(){
      return seed;
    }

    method void update(int carrilRandom){
        let stepAnimation=1;
        let draw= true;
        let newCone = true;
        let carril = carrilRandom;
        let x = 29;
        if(carril = 0){
            let y = 5;
        }
        if(carril=1){
            let y = 104;
        }
        if(carril=2){
            let y = 208;
        }
        return;
    }

    method void erase() {
        var int memAddress;
        let memAddress = 16384+(x+(y*32));
        // column 0
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        do Memory.poke(memAddress +416, 0);
        // column 1
        do Memory.poke(memAddress +1, 0);
        do Memory.poke(memAddress +33, 0);
        do Memory.poke(memAddress +65, 0);
        do Memory.poke(memAddress +97, 0);
        do Memory.poke(memAddress +129, 0);
        do Memory.poke(memAddress +161, 0);
        do Memory.poke(memAddress +193, 0);
        do Memory.poke(memAddress +225, 0);
        do Memory.poke(memAddress +257, 0);
        do Memory.poke(memAddress +289, 0);
        do Memory.poke(memAddress +321, 0);
        do Memory.poke(memAddress +353, 0);
        do Memory.poke(memAddress +385, 0);
        return;
    }

    method void moveLeft(int carril){
        if(x > 0){
            do erase();
            let x = x-1;
            
            do draw(); 
            return;
            
        }
        do erase();
        do update(carril);
        return;
        // // Animaci칩n de salida
        // if(x < 1){
        //     do erase();
        //     let x = x-1;
        //     if(draw){//draw es un booleano = true
        //         do draws();
        //     }
        //     if(~(draw)){ //Si es false
        //         do deletes();
        //     }
        //     if(draw){
        //         let stepAnimation= stepAnimation+1;
        //     }
        //     let draw = ~(draw);
        // }
    }

    
    method void draws(){
        if (stepAnimation = 1) {
            do Animacion_cono.cono1(x,y);
        }
        return; 
    }
    method void deletes(){
        if (stepAnimation = 1) {
            do Animacion_cono.deletecono1(x, y);
        }
        return;
    }
}