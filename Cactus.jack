class Cactus {
    field int inicio;
    field int location;
    field int memoria;

    constructor Cactus new(int posInit){
        let location = posInit;
        do draw(location);
        return this;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }

    // dibujar el cactus
    method void draw(int location) {
        var int memAddress;
        let memAddress = 16384+location;
        // column 0
	do Memory.poke(memAddress, 1792);
	do Memory.poke(memAddress +32, 3974);
	do Memory.poke(memAddress +64, 8143);
	do Memory.poke(memAddress +96, 8143);
	do Memory.poke(memAddress +128, 8143);
	do Memory.poke(memAddress +160, 8143);
	do Memory.poke(memAddress +192, 8143);
	do Memory.poke(memAddress +224, 8143);
	do Memory.poke(memAddress +256, 8175);
	do Memory.poke(memAddress +288, 8191);
	do Memory.poke(memAddress +320, 8190);
	do Memory.poke(memAddress +352, 8188);
	do Memory.poke(memAddress +384, 8160);
	do Memory.poke(memAddress +416, -24640);
	do Memory.poke(memAddress +448, -24640);
	do Memory.poke(memAddress +480, -24640);
	do Memory.poke(memAddress +512, -24640);
	do Memory.poke(memAddress +544, -16448);
	do Memory.poke(memAddress +576, -64);
	do Memory.poke(memAddress +608, -64);
	do Memory.poke(memAddress +640, -64);
	do Memory.poke(memAddress +672, -64);
	do Memory.poke(memAddress +704, 16320);
	do Memory.poke(memAddress +736, 8128);
	do Memory.poke(memAddress +768, 8128);
	do Memory.poke(memAddress +800, 8128);
	do Memory.poke(memAddress +832, 8128);
	do Memory.poke(memAddress +864, 0);
	// column 1
	do Memory.poke(memAddress +385, 3);
	do Memory.poke(memAddress +417, 7);
	do Memory.poke(memAddress +449, 7);
	do Memory.poke(memAddress +481, 7);
	do Memory.poke(memAddress +513, 7);
	do Memory.poke(memAddress +545, 7);
	do Memory.poke(memAddress +577, 7);
	do Memory.poke(memAddress +609, 7);
	do Memory.poke(memAddress +641, 3);
	do Memory.poke(memAddress +673, 1);
	do Memory.poke(memAddress +705, 0);
	return;
    }
}